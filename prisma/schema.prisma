// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  
  name     String?
  lastName String?
  password String?
  avatarUrl String?

  role Role @default(user)

  provider Provider @default(credentials)

  profile Profile?
  fatsecret Fatsecret?
  galery Galery[]
  task Task[]
  measure Measure[]
  changes Changes[]

  @@map("user")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  birthday DateTime?

  subscribe Boolean @default(false)

  tdee Decimal? @db.Decimal(10, 2)
  desiredTdee Decimal? @db.Decimal(10, 2)
  bmi Decimal? @db.Decimal(10, 2)
  bmr Decimal? @db.Decimal(10, 2)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique

   @@map("profile")
}

model Fatsecret {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  token String?
  secret String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique

   @@map("fatsecret")
}

model Galery {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  photoUrl String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@map("galery")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  description String?
  completed Boolean @default(false)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@map("task")
}

model Measure {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chest String
  arms String
  waist String
  lowerAbdomen String
  hips String
  legsUnderButtock String
  calves String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@map("measure")
}

model Changes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  description String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@map("changes")
}

enum Provider {
  credentials
  google
}

enum Role {
  user
  admin
}